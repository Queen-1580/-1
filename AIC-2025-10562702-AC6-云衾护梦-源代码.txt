<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>医疗监护仪模拟器</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Arial', 'Microsoft YaHei', sans-serif;
            background: linear-gradient(135deg, #1a2a6c, #2c3e50);
            color: #ecf0f1;
            min-height: 100vh;
            overflow-x: hidden;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 15px;
            border: 2px solid #3498db;
            position: relative;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            color: #fff;
            text-shadow: 0 0 10px rgba(52, 152, 219, 0.7);
        }
        
        .patient-info {
            display: flex;
            justify-content: center;
            gap: 30px;
            margin-top: 15px;
            flex-wrap: wrap;
        }
        
        .patient-detail {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 1.1em;
        }
        
        .dashboard {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .ecg-container, .bp-container, .spo2-container, .resp-container {
            background: rgba(0, 0, 0, 0.6);
            border-radius: 15px;
            padding: 20px;
            border: 2px solid #2ecc71;
            box-shadow: 0 0 20px rgba(46, 204, 113, 0.3);
            position: relative;
        }
        
        .bp-container {
            border-color: #e74c3c;
            box-shadow: 0 0 20px rgba(231, 76, 60, 0.3);
        }
        
        .spo2-container {
            border-color: #3498db;
            box-shadow: 0 0 20px rgba(52, 152, 219, 0.3);
        }
        
        .resp-container {
            border-color: #9b59b6;
            box-shadow: 0 0 20px rgba(155, 89, 182, 0.3);
        }
        
        .panel-title {
            font-size: 1.5em;
            margin-bottom: 20px;
            color: #fff;
            text-align: center;
            padding-bottom: 10px;
            border-bottom: 2px solid currentColor;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }
        
        .ecg-container .panel-title {
            color: #2ecc71;
        }
        
        .bp-container .panel-title {
            color: #e74c3c;
        }
        
        .spo2-container .panel-title {
            color: #3498db;
        }
        
        .resp-container .panel-title {
            color: #9b59b6;
        }
        
        canvas {
            width: 100%;
            height: 250px;
            background: #000;
            border-radius: 10px;
            border: 1px solid #34495e;
        }
        
        .vitals-display {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin: 20px 0;
        }
        
        .vital-card {
            background: rgba(52, 73, 94, 0.6);
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            border: 2px solid transparent;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .vital-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
            transition: left 0.5s;
        }
        
        .vital-card:hover::before {
            left: 100%;
        }
        
        .vital-card.critical {
            border-color: #e74c3c;
            background: rgba(231, 76, 60, 0.2);
            animation: pulse-alert 1s infinite;
        }
        
        .vital-card.warning {
            border-color: #f39c12;
            background: rgba(243, 156, 18, 0.2);
        }
        
        .vital-value {
            font-size: 2.5em;
            font-weight: bold;
            margin: 10px 0;
            transition: all 0.3s ease;
        }
        
        .heart-rate .vital-value {
            color: #2ecc71;
        }
        
        .systolic .vital-value {
            color: #e74c3c;
        }
        
        .diastolic .vital-value {
            color: #3498db;
        }
        
        .spo2 .vital-value {
            color: #3498db;
        }
        
        .respiratory .vital-value {
            color: #9b59b6;
        }
        
        .vital-label {
            font-size: 1.1em;
            color: #bdc3c7;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 5px;
        }
        
        .vital-unit {
            font-size: 0.9em;
            color: #7f8c8d;
        }
        
        .vital-trend {
            font-size: 0.8em;
            margin-top: 5px;
        }
        
        .trend-up {
            color: #e74c3c;
        }
        
        .trend-down {
            color: #2ecc71;
        }
        
        .trend-stable {
            color: #f39c12;
        }
        
        .controls {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-top: 30px;
        }
        
        .control-group {
            background: rgba(0, 0, 0, 0.4);
            padding: 20px;
            border-radius: 10px;
            border: 1px solid #34495e;
        }
        
        .control-title {
            font-size: 1.2em;
            margin-bottom: 15px;
            color: #fff;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }
        
        .slider-container {
            margin: 15px 0;
        }
        
        .slider-container label {
            display: block;
            margin-bottom: 8px;
            color: #ecf0f1;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        input[type="range"] {
            width: 100%;
            height: 8px;
            -webkit-appearance: none;
            background: #2c3e50;
            border-radius: 4px;
            outline: none;
        }
        
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            cursor: pointer;
            box-shadow: 0 0 5px rgba(0,0,0,0.5);
        }
        
        .heart-rate-slider::-webkit-slider-thumb {
            background: #2ecc71;
        }
        
        .systolic-slider::-webkit-slider-thumb {
            background: #e74c3c;
        }
        
        .diastolic-slider::-webkit-slider-thumb {
            background: #3498db;
        }
        
        .spo2-slider::-webkit-slider-thumb {
            background: #3498db;
        }
        
        .respiratory-slider::-webkit-slider-thumb {
            background: #9b59b6;
        }
        
        .slider-value {
            text-align: center;
            font-weight: bold;
            margin-top: 5px;
            font-size: 1.1em;
        }
        
        .alarm-settings {
            background: rgba(0, 0, 0, 0.4);
            padding: 20px;
            border-radius: 10px;
            border: 1px solid #34495e;
            margin-top: 20px;
        }
        
        .alarm-inputs {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }
        
        .input-group {
            margin-bottom: 15px;
        }
        
        .input-group label {
            display: block;
            margin-bottom: 5px;
            color: #ecf0f1;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .input-group input {
            width: 100%;
            padding: 10px;
            border: 2px solid #34495e;
            border-radius: 5px;
            background: #2c3e50;
            color: #ecf0f1;
            font-size: 1.1em;
        }
        
        .alarm-status {
            margin-top: 20px;
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            font-weight: bold;
            display: none;
            transition: all 0.3s ease;
        }
        
        .alarm-active {
            background: rgba(231, 76, 60, 0.3);
            border: 2px solid #e74c3c;
            color: #e74c3c;
            display: block;
            animation: pulse-alert 1s infinite;
        }
        
        .action-buttons {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 15px;
            margin-top: 30px;
        }
        
        button {
            padding: 15px;
            border: none;
            border-radius: 8px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }
        
        .btn-pause {
            background: #f39c12;
            color: #fff;
        }
        
        .btn-pause:hover {
            background: #e67e22;
            transform: translateY(-2px);
        }
        
        .btn-reset {
            background: #e74c3c;
            color: #fff;
        }
        
        .btn-reset:hover {
            background: #c0392b;
            transform: translateY(-2px);
        }
        
        .btn-mute {
            background: #95a5a6;
            color: #fff;
        }
        
        .btn-mute:hover {
            background: #7f8c8d;
            transform: translateY(-2px);
        }
        
        .btn-scenario {
            background: #9b59b6;
            color: #fff;
        }
        
        .btn-scenario:hover {
            background: #8e44ad;
            transform: translateY(-2px);
        }
        
        @keyframes pulse-alert {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        
        .status-indicators {
            display: flex;
            justify-content: space-around;
            margin-top: 20px;
            flex-wrap: wrap;
            gap: 15px;
        }
        
        .status-indicator {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .status-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
        }
        
        .status-normal {
            background: #2ecc71;
        }
        
        .status-warning {
            background: #f39c12;
        }
        
        .status-critical {
            background: #e74c3c;
        }
        
        .additional-metrics {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-top: 20px;
        }
        
        .history-panel {
            background: rgba(0, 0, 0, 0.4);
            padding: 20px;
            border-radius: 10px;
            border: 1px solid #34495e;
            margin-top: 20px;
        }
        
        .history-title {
            font-size: 1.2em;
            margin-bottom: 15px;
            color: #fff;
            text-align: center;
        }
        
        .history-list {
            max-height: 200px;
            overflow-y: auto;
        }
        
        .history-item {
            padding: 10px;
            margin: 5px 0;
            background: rgba(52, 73, 94, 0.6);
            border-radius: 5px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .history-time {
            font-size: 0.8em;
            color: #bdc3c7;
        }
        
        .scenario-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }
        
        .modal-content {
            background: #2c3e50;
            padding: 30px;
            border-radius: 15px;
            max-width: 500px;
            width: 90%;
            border: 2px solid #3498db;
        }
        
        .modal-title {
            font-size: 1.5em;
            margin-bottom: 20px;
            text-align: center;
            color: #fff;
        }
        
        .scenario-options {
            display: grid;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .scenario-option {
            padding: 15px;
            background: rgba(52, 73, 94, 0.6);
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 2px solid transparent;
        }
        
        .scenario-option:hover {
            border-color: #3498db;
            transform: translateY(-2px);
        }
        
        .scenario-option.active {
            border-color: #2ecc71;
            background: rgba(46, 204, 113, 0.2);
        }
        
        .modal-buttons {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
        }
        
        @media (max-width: 768px) {
            .dashboard {
                grid-template-columns: 1fr;
            }
            
            .controls {
                grid-template-columns: 1fr;
            }
            
            .alarm-inputs {
                grid-template-columns: 1fr;
            }
            
            .action-buttons {
                grid-template-columns: 1fr 1fr;
            }
            
            .additional-metrics {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>⚕️ 医疗监护仪模拟器</h1>
            <p>实时监测心电图、心率、血压、血氧饱和度和呼吸频率</p>
            <div class="patient-info">
                <div class="patient-detail">
                    <span>👤 患者:</span>
                    <span id="patientName">张三</span>
                </div>
                <div class="patient-detail">
                    <span>🆔 病历号:</span>
                    <span id="patientId">202400123</span>
                </div>
                <div class="patient-detail">
                    <span>🏥 科室:</span>
                    <span id="patientDept">心血管内科</span>
                </div>
                <div class="patient-detail">
                    <span>⏰ 监护时间:</span>
                    <span id="monitoringTime">00:00:00</span>
                </div>
            </div>
        </div>
        
        <div class="dashboard">
            <div class="ecg-container">
                <div class="panel-title">📈 心电图 (ECG)</div>
                <canvas id="ecgCanvas"></canvas>
                
                <div class="vitals-display">
                    <div class="vital-card heart-rate">
                        <div class="vital-label">❤️ 心率</div>
                        <div class="vital-value" id="heartRateValue">72</div>
                        <div class="vital-unit">BPM</div>
                        <div class="vital-trend trend-stable" id="heartRateTrend">→ 稳定</div>
                    </div>
                    <div class="vital-card">
                        <div class="vital-label">📊 心电图状态</div>
                        <div class="vital-value" id="ecgStatus">正常</div>
                        <div class="vital-unit">Sinus Rhythm</div>
                    </div>
                </div>
            </div>
            
            <div class="bp-container">
                <div class="panel-title">💓 血压监测</div>
                <canvas id="bpCanvas"></canvas>
                
                <div class="vitals-display">
                    <div class="vital-card systolic">
                        <div class="vital-label">🔼 收缩压</div>
                        <div class="vital-value" id="systolicValue">120</div>
                        <div class="vital-unit">mmHg</div>
                        <div class="vital-trend trend-stable" id="systolicTrend">→ 稳定</div>
                    </div>
                    <div class="vital-card diastolic">
                        <div class="vital-label">🔽 舒张压</div>
                        <div class="vital-value" id="diastolicValue">80</div>
                        <div class="vital-unit">mmHg</div>
                        <div class="vital-trend trend-stable" id="diastolicTrend">→ 稳定</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="additional-metrics">
            <div class="spo2-container">
                <div class="panel-title">💧 血氧饱和度</div>
                <canvas id="spo2Canvas"></canvas>
                
                <div class="vitals-display">
                    <div class="vital-card spo2">
                        <div class="vital-label">🩸 血氧饱和度</div>
                        <div class="vital-value" id="spo2Value">98</div>
                        <div class="vital-unit">%</div>
                        <div class="vital-trend trend-stable" id="spo2Trend">→ 稳定</div>
                    </div>
                    <div class="vital-card">
                        <div class="vital-label">📊 灌注指数</div>
                        <div class="vital-value" id="piValue">1.2</div>
                        <div class="vital-unit">PI</div>
                    </div>
                </div>
            </div>
            
            <div class="resp-container">
                <div class="panel-title">🌬️ 呼吸监测</div>
                <canvas id="respCanvas"></canvas>
                
                <div class="vitals-display">
                    <div class="vital-card respiratory">
                        <div class="vital-label">🫁 呼吸频率</div>
                        <div class="vital-value" id="respiratoryValue">16</div>
                        <div class="vital-unit">次/分钟</div>
                        <div class="vital-trend trend-stable" id="respiratoryTrend">→ 稳定</div>
                    </div>
                    <div class="vital-card">
                        <div class="vital-label">📊 呼吸状态</div>
                        <div class="vital-value" id="respStatus">正常</div>
                        <div class="vital-unit">规律</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="controls">
            <div class="control-group">
                <div class="control-title">🎚️ 参数控制</div>
                
                <div class="slider-container">
                    <label for="heartRateSlider">
                        <span>❤️ 心率 (BPM)</span>
                        <span id="heartRateRange">40-180</span>
                    </label>
                    <input type="range" id="heartRateSlider" class="heart-rate-slider" min="40" max="180" value="72">
                    <div class="slider-value" id="heartRateSliderValue">72</div>
                </div>
                
                <div class="slider-container">
                    <label for="systolicSlider">
                        <span>🔼 收缩压 (mmHg)</span>
                        <span id="systolicRange">80-200</span>
                    </label>
                    <input type="range" id="systolicSlider" class="systolic-slider" min="80" max="200" value="120">
                    <div class="slider-value" id="systolicSliderValue">120</div>
                </div>
                
                <div class="slider-container">
                    <label for="diastolicSlider">
                        <span>🔽 舒张压 (mmHg)</span>
                        <span id="diastolicRange">50-130</span>
                    </label>
                    <input type="range" id="diastolicSlider" class="diastolic-slider" min="50" max="130" value="80">
                    <div class="slider-value" id="diastolicSliderValue">80</div>
                </div>
                
                <div class="slider-container">
                    <label for="spo2Slider">
                        <span>🩸 血氧饱和度 (%)</span>
                        <span id="spo2Range">70-100</span>
                    </label>
                    <input type="range" id="spo2Slider" class="spo2-slider" min="70" max="100" value="98">
                    <div class="slider-value" id="spo2SliderValue">98</div>
                </div>
                
                <div class="slider-container">
                    <label for="respiratorySlider">
                        <span>🫁 呼吸频率 (次/分钟)</span>
                        <span id="respiratoryRange">8-40</span>
                    </label>
                    <input type="range" id="respiratorySlider" class="respiratory-slider" min="8" max="40" value="16">
                    <div class="slider-value" id="respiratorySliderValue">16</div>
                </div>
            </div>
            
            <div class="control-group">
                <div class="control-title">⚠️ 报警设置</div>
                
                <div class="alarm-inputs">
                    <div class="input-group">
                        <label for="hrHighAlarm">❤️ 心率高报警</label>
                        <input type="number" id="hrHighAlarm" value="120" min="60" max="200">
                    </div>
                    
                    <div class="input-group">
                        <label for="hrLowAlarm">❤️ 心率低报警</label>
                        <input type="number" id="hrLowAlarm" value="50" min="30" max="100">
                    </div>
                    
                    <div class="input-group">
                        <label for="bpHighAlarm">💓 血压高报警</label>
                        <input type="number" id="bpHighAlarm" value="140" min="100" max="200">
                    </div>
                    
                    <div class="input-group">
                        <label for="bpLowAlarm">💓 血压低报警</label>
                        <input type="number" id="bpLowAlarm" value="90" min="60" max="120">
                    </div>
                    
                    <div class="input-group">
                        <label for="spo2LowAlarm">💧 血氧低报警</label>
                        <input type="number" id="spo2LowAlarm" value="90" min="70" max="98">
                    </div>
                    
                    <div class="input-group">
                        <label for="respHighAlarm">🌬️ 呼吸高报警</label>
                        <input type="number" id="respHighAlarm" value="24" min="12" max="40">
                    </div>
                </div>
                
                <div class="alarm-status" id="alarmStatus">
                    🔔 报警: <span id="alarmMessage">正常</span>
                </div>
            </div>
        </div>
        
        <div class="history-panel">
            <div class="history-title">📋 报警历史记录</div>
            <div class="history-list" id="alarmHistory">
                <!-- 报警历史将通过JavaScript动态添加 -->
            </div>
        </div>
        
        <div class="action-buttons">
            <button class="btn-pause" id="pauseBtn">
                <span>⏸️</span>
                <span>暂停</span>
            </button>
            <button class="btn-reset" id="resetBtn">
                <span>🔄</span>
                <span>重置</span>
            </button>
            <button class="btn-mute" id="muteBtn">
                <span>🔇</span>
                <span>静音报警</span>
            </button>
            <button class="btn-scenario" id="scenarioBtn">
                <span>🎭</span>
                <span>模拟场景</span>
            </button>
        </div>
        
        <div class="status-indicators">
            <div class="status-indicator">
                <div class="status-dot status-normal"></div>
                <span>正常范围</span>
            </div>
            <div class="status-indicator">
                <div class="status-dot status-warning"></div>
                <span>警告</span>
            </div>
            <div class="status-indicator">
                <div class="status-dot status-critical"></div>
                <span>危险</span>
            </div>
        </div>
    </div>
    
    <!-- 模拟场景选择模态框 -->
    <div class="scenario-modal" id="scenarioModal">
        <div class="modal-content">
            <div class="modal-title">🎭 选择模拟场景</div>
            <div class="scenario-options">
                <div class="scenario-option" data-scenario="normal">
                    <strong>正常状态</strong>
                    <p>所有生命体征在正常范围内</p>
                </div>
                <div class="scenario-option" data-scenario="tachycardia">
                    <strong>心动过速</strong>
                    <p>心率异常升高 (>120 BPM)</p>
                </div>
                <div class="scenario-option" data-scenario="bradycardia">
                    <strong>心动过缓</strong>
                    <p>心率异常降低 (<50 BPM)</p>
                </div>
                <div class="scenario-option" data-scenario="hypertension">
                    <strong>高血压危象</strong>
                    <p>血压异常升高</p>
                </div>
                <div class="scenario-option" data-scenario="hypotension">
                    <strong>低血压</strong>
                    <p>血压异常降低</p>
                </div>
                <div class="scenario-option" data-scenario="hypoxia">
                    <strong>低氧血症</strong>
                    <p>血氧饱和度降低</p>
                </div>
            </div>
            <div class="modal-buttons">
                <button class="btn-mute" id="cancelScenario">取消</button>
                <button class="btn-pause" id="applyScenario">应用场景</button>
            </div>
        </div>
    </div>

    <script>
        // 获取DOM元素
        const ecgCanvas = document.getElementById('ecgCanvas');
        const bpCanvas = document.getElementById('bpCanvas');
        const spo2Canvas = document.getElementById('spo2Canvas');
        const respCanvas = document.getElementById('respCanvas');
        const ecgCtx = ecgCanvas.getContext('2d');
        const bpCtx = bpCanvas.getContext('2d');
        const spo2Ctx = spo2Canvas.getContext('2d');
        const respCtx = respCanvas.getContext('2d');
        
        // 获取控制元素
        const heartRateSlider = document.getElementById('heartRateSlider');
        const systolicSlider = document.getElementById('systolicSlider');
        const diastolicSlider = document.getElementById('diastolicSlider');
        const spo2Slider = document.getElementById('spo2Slider');
        const respiratorySlider = document.getElementById('respiratorySlider');
        
        // 获取显示元素
        const heartRateValue = document.getElementById('heartRateValue');
        const systolicValue = document.getElementById('systolicValue');
        const diastolicValue = document.getElementById('diastolicValue');
        const spo2Value = document.getElementById('spo2Value');
        const respiratoryValue = document.getElementById('respiratoryValue');
        const ecgStatus = document.getElementById('ecgStatus');
        const respStatus = document.getElementById('respStatus');
        const piValue = document.getElementById('piValue');
        
        // 趋势显示元素
        const heartRateTrend = document.getElementById('heartRateTrend');
        const systolicTrend = document.getElementById('systolicTrend');
        const diastolicTrend = document.getElementById('diastolicTrend');
        const spo2Trend = document.getElementById('spo2Trend');
        const respiratoryTrend = document.getElementById('respiratoryTrend');
        
        // 报警元素
        const alarmStatus = document.getElementById('alarmStatus');
        const alarmMessage = document.getElementById('alarmMessage');
        const alarmHistory = document.getElementById('alarmHistory');
        
        // 患者信息元素
        const monitoringTime = document.getElementById('monitoringTime');
        
        // 配置参数
        let config = {
            heartRate: 72,
            systolicBP: 120,
            diastolicBP: 80,
            spo2: 98,
            respiratoryRate: 16,
            isPaused: false,
            alarmsMuted: false,
            monitoringStartTime: Date.now(),
            alarmThresholds: {
                hrHigh: 120,
                hrLow: 50,
                bpHigh: 140,
                bpLow: 90,
                spo2Low: 90,
                respHigh: 24
            },
            currentAlarms: [],
            previousValues: {
                heartRate: 72,
                systolicBP: 120,
                diastolicBP: 80,
                spo2: 98,
                respiratoryRate: 16
            }
        };

        // 初始化数据
        let ecgData = [];
        let bpData = [];
        let spo2Data = [];
        let respData = [];
        const dataLength = 300;
        let phase = 0;
        let animationId;
        let lastAlarmTime = 0;
        let selectedScenario = 'normal';

        // 初始化函数
        function init() {
            // 设置画布大小
            ecgCanvas.width = ecgCanvas.offsetWidth;
            ecgCanvas.height = ecgCanvas.offsetHeight;
            bpCanvas.width = bpCanvas.offsetWidth;
            bpCanvas.height = bpCanvas.offsetHeight;
            spo2Canvas.width = spo2Canvas.offsetWidth;
            spo2Canvas.height = spo2Canvas.offsetHeight;
            respCanvas.width = respCanvas.offsetWidth;
            respCanvas.height = respCanvas.offsetHeight;
            
            // 初始化数据数组
            ecgData = [];
            bpData = [];
            spo2Data = [];
            respData = [];
            for (let i = 0; i < dataLength; i++) {
                ecgData.push(ecgCanvas.height / 2);
                bpData.push(bpCanvas.height / 2);
                spo2Data.push(spo2Canvas.height / 2);
                respData.push(respCanvas.height / 2);
            }
            
            // 重置报警
            config.currentAlarms = [];
            alarmHistory.innerHTML = '';
            updateAlarmDisplay();
            
            // 重置监控时间
            config.monitoringStartTime = Date.now();
            updateMonitoringTime();
            
            // 开始动画
            if (animationId) cancelAnimationFrame(animationId);
            draw();
        }

        // 绘制心电图
        function drawECG() {
            const baseline = ecgCanvas.height / 2;
            const amplitude = 40;
            
            // 生成ECG数据点
            phase += (config.heartRate / 60) * 0.02;
            const newPoint = generateECGPoint(phase, baseline, amplitude);
            ecgData.push(newPoint);
            if (ecgData.length > dataLength) ecgData.shift();
            
            // 绘制ECG
            ecgCtx.clearRect(0, 0, ecgCanvas.width, ecgCanvas.height);
            drawGrid(ecgCtx, ecgCanvas);
            
            ecgCtx.beginPath();
            ecgCtx.strokeStyle = '#2ecc71';
            ecgCtx.lineWidth = 2;
            
            const pointSpacing = ecgCanvas.width / dataLength;
            ecgCtx.moveTo(0, ecgData[0]);
            
            for (let i = 1; i < ecgData.length; i++) {
                ecgCtx.lineTo(i * pointSpacing, ecgData[i]);
            }
            
            ecgCtx.stroke();
        }

        // 绘制血压图
        function drawBP() {
            const baseline = bpCanvas.height / 2;
            
            // 生成血压数据点（模拟血压波动）
            const time = Date.now() * 0.001;
            const systolicVariation = Math.sin(time * 0.5) * 5;
            const diastolicVariation = Math.cos(time * 0.3) * 3;
            
            const systolicPoint = baseline - (config.systolicBP + systolicVariation - 100) * 0.5;
            const diastolicPoint = baseline - (config.diastolicBP + diastolicVariation - 60) * 0.5;
            
            bpData.push((systolicPoint + diastolicPoint) / 2);
            if (bpData.length > dataLength) bpData.shift();
            
            // 绘制BP
            bpCtx.clearRect(0, 0, bpCanvas.width, bpCanvas.height);
            drawGrid(bpCtx, bpCanvas);
            
            // 绘制收缩压和舒张压线
            bpCtx.strokeStyle = '#e74c3c';
            bpCtx.setLineDash([5, 5]);
            bpCtx.beginPath();
            bpCtx.moveTo(0, systolicPoint);
            bpCtx.lineTo(bpCanvas.width, systolicPoint);
            bpCtx.stroke();
            
            bpCtx.strokeStyle = '#3498db';
            bpCtx.beginPath();
            bpCtx.moveTo(0, diastolicPoint);
            bpCtx.lineTo(bpCanvas.width, diastolicPoint);
            bpCtx.stroke();
            
            bpCtx.setLineDash([]);
            
            // 绘制血压波形
            bpCtx.beginPath();
            bpCtx.strokeStyle = '#9b59b6';
            bpCtx.lineWidth = 2;
            
            const pointSpacing = bpCanvas.width / dataLength;
            bpCtx.moveTo(0, bpData[0]);
            
            for (let i = 1; i < bpData.length; i++) {
                bpCtx.lineTo(i * pointSpacing, bpData[i]);
            }
            
            bpCtx.stroke();
        }

        // 绘制血氧饱和度图
        function drawSpO2() {
            const baseline = spo2Canvas.height / 2;
            const amplitude = 30;
            
            // 生成血氧数据点
            const time = Date.now() * 0.002;
            const variation = Math.sin(time) * 2;
            const newPoint = baseline - (config.spo2 + variation - 95) * 2;
            
            spo2Data.push(newPoint);
            if (spo2Data.length > dataLength) spo2Data.shift();
            
            // 绘制SpO2
            spo2Ctx.clearRect(0, 0, spo2Canvas.width, spo2Canvas.height);
            drawGrid(spo2Ctx, spo2Canvas);
            
            spo2Ctx.beginPath();
            spo2Ctx.strokeStyle = '#3498db';
            spo2Ctx.lineWidth = 2;
            
            const pointSpacing = spo2Canvas.width / dataLength;
            spo2Ctx.moveTo(0, spo2Data[0]);
            
            for (let i = 1; i < spo2Data.length; i++) {
                spo2Ctx.lineTo(i * pointSpacing, spo2Data[i]);
            }
            
            spo2Ctx.stroke();
            
            // 绘制目标线（95%）
            spo2Ctx.strokeStyle = '#2ecc71';
            spo2Ctx.setLineDash([5, 5]);
            spo2Ctx.beginPath();
            spo2Ctx.moveTo(0, baseline - (95 - 95) * 2);
            spo2Ctx.lineTo(spo2Canvas.width, baseline - (95 - 95) * 2);
            spo2Ctx.stroke();
            spo2Ctx.setLineDash([]);
        }

        // 绘制呼吸图
        function drawRespiratory() {
            const baseline = respCanvas.height / 2;
            const amplitude = 40;
            
            // 生成呼吸数据点
            const time = Date.now() * 0.001;
            const respiratoryPhase = time * (config.respiratoryRate / 60) * 2 * Math.PI;
            const newPoint = baseline + Math.sin(respiratoryPhase) * amplitude;
            
            respData.push(newPoint);
            if (respData.length > dataLength) respData.shift();
            
            // 绘制呼吸波形
            respCtx.clearRect(0, 0, respCanvas.width, respCanvas.height);
            drawGrid(respCtx, respCanvas);
            
            respCtx.beginPath();
            respCtx.strokeStyle = '#9b59b6';
            respCtx.lineWidth = 2;
            
            const pointSpacing = respCanvas.width / dataLength;
            respCtx.moveTo(0, respData[0]);
            
            for (let i = 1; i < respData.length; i++) {
                respCtx.lineTo(i * pointSpacing, respData[i]);
            }
            
            respCtx.stroke();
        }

        // 生成ECG点
        function generateECGPoint(phase, baseline, amplitude) {
            let value = 0;
            const phaseMod = phase % (2 * Math.PI);
            
            // P波
            if (phaseMod < 0.4 * Math.PI) {
                value = 0.25 * Math.sin(phaseMod * 2.5);
            }
            // QRS复合波
            else if (phaseMod < 0.7 * Math.PI) {
                const qrsPhase = (phaseMod - 0.5 * Math.PI) * 10;
                value = 1.0 * Math.sin(qrsPhase) + 0.3 * Math.sin(2 * qrsPhase);
            }
            // T波
            else if (phaseMod < 1.1 * Math.PI) {
                const tPhase = (phaseMod - 0.9 * Math.PI) * 5;
                value = 0.4 * Math.sin(tPhase) * Math.exp(-tPhase);
            }
            
            return baseline + value * amplitude + (Math.random() * 2 - 1);
        }

        // 绘制网格
        function drawGrid(ctx, canvas) {
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';
            ctx.lineWidth = 1;
            
            // 垂直网格线
            for (let x = 0; x < canvas.width; x += 20) {
                ctx.beginPath();
                ctx.moveTo(x, 0);
                ctx.lineTo(x, canvas.height);
                ctx.stroke();
            }
            
            // 水平网格线
            for (let y = 0; y < canvas.height; y += 20) {
                ctx.beginPath();
                ctx.moveTo(0, y);
                ctx.lineTo(canvas.width, y);
                ctx.stroke();
            }
        }

        // 检查报警
        function checkAlarms() {
            config.currentAlarms = [];
            
            // 检查心率报警
            if (config.heartRate > config.alarmThresholds.hrHigh) {
                config.currentAlarms.push(`心率过高: ${config.heartRate} BPM`);
            }
            if (config.heartRate < config.alarmThresholds.hrLow) {
                config.currentAlarms.push(`心率过低: ${config.heartRate} BPM`);
            }
            
            // 检查血压报警
            if (config.systolicBP > config.alarmThresholds.bpHigh) {
                config.currentAlarms.push(`血压过高: ${config.systolicBP}/${config.diastolicBP} mmHg`);
            }
            if (config.systolicBP < config.alarmThresholds.bpLow) {
                config.currentAlarms.push(`血压过低: ${config.systolicBP}/${config.diastolicBP} mmHg`);
            }
            
            // 检查血氧报警
            if (config.spo2 < config.alarmThresholds.spo2Low) {
                config.currentAlarms.push(`血氧过低: ${config.spo2}%`);
            }
            
            // 检查呼吸报警
            if (config.respiratoryRate > config.alarmThresholds.respHigh) {
                config.currentAlarms.push(`呼吸过快: ${config.respiratoryRate} 次/分钟`);
            }
            
            updateAlarmDisplay();
            
            // 记录报警历史
            if (config.currentAlarms.length > 0 && Date.now() - lastAlarmTime > 5000) {
                addAlarmToHistory(config.currentAlarms.join(', '));
                lastAlarmTime = Date.now();
            }
            
            // 触发声音报警（如果不是静音状态）
            if (config.currentAlarms.length > 0 && !config.alarmsMuted && Date.now() - lastAlarmTime > 2000) {
                playAlarmSound();
                lastAlarmTime = Date.now();
            }
        }

        // 添加报警到历史记录
        function addAlarmToHistory(alarmText) {
            const now = new Date();
            const timeString = now.toLocaleTimeString();
            
            const historyItem = document.createElement('div');
            historyItem.className = 'history-item';
            historyItem.innerHTML = `
                <span>${alarmText}</span>
                <span class="history-time">${timeString}</span>
            `;
            
            alarmHistory.appendChild(historyItem);
            
            // 限制历史记录数量
            if (alarmHistory.children.length > 10) {
                alarmHistory.removeChild(alarmHistory.children[0]);
            }
            
            // 滚动到底部
            alarmHistory.scrollTop = alarmHistory.scrollHeight;
        }

        // 播放报警声音
        function playAlarmSound() {
            try {
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
                oscillator.frequency.setValueAtTime(600, audioContext.currentTime + 0.1);
                
                gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);
                
                oscillator.start();
                oscillator.stop(audioContext.currentTime + 0.3);
            } catch (e) {
                console.log('音频上下文不支持');
            }
        }

        // 更新报警显示
        function updateAlarmDisplay() {
            if (config.currentAlarms.length > 0) {
                alarmStatus.className = 'alarm-status alarm-active';
                alarmMessage.textContent = config.currentAlarms.join(' | ');
            } else {
                alarmStatus.className = 'alarm-status';
                alarmMessage.textContent = '正常';
            }
        }

        // 更新生命体征显示
        function updateVitalsDisplay() {
            heartRateValue.textContent = config.heartRate;
            systolicValue.textContent = config.systolicBP;
            diastolicValue.textContent = config.diastolicBP;
            spo2Value.textContent = config.spo2;
            respiratoryValue.textContent = config.respiratoryRate;
            
            // 更新趋势指示器
            updateTrendIndicator(heartRateTrend, config.heartRate, config.previousValues.heartRate);
            updateTrendIndicator(systolicTrend, config.systolicBP, config.previousValues.systolicBP);
            updateTrendIndicator(diastolicTrend, config.diastolicBP, config.previousValues.diastolicBP);
            updateTrendIndicator(spo2Trend, config.spo2, config.previousValues.spo2);
            updateTrendIndicator(respiratoryTrend, config.respiratoryRate, config.previousValues.respiratoryRate);
            
            // 更新ECG状态
            if (config.heartRate > 100) {
                ecgStatus.textContent = '心动过速';
                ecgStatus.style.color = '#e74c3c';
            } else if (config.heartRate < 60) {
                ecgStatus.textContent = '心动过缓';
                ecgStatus.style.color = '#f39c12';
            } else {
                ecgStatus.textContent = '正常窦性心律';
                ecgStatus.style.color = '#2ecc71';
            }
            
            // 更新呼吸状态
            if (config.respiratoryRate > 20) {
                respStatus.textContent = '呼吸急促';
                respStatus.style.color = '#e74c3c';
            } else if (config.respiratoryRate < 12) {
                respStatus.textContent = '呼吸缓慢';
                respStatus.style.color = '#f39c12';
            } else {
                respStatus.textContent = '呼吸正常';
                respStatus.style.color = '#9b59b6';
            }
            
            // 更新灌注指数（基于血氧和心率）
            const pi = (config.spo2 / 100) * (60 / config.heartRate) * 2;
            piValue.textContent = pi.toFixed(1);
            
            // 更新卡片状态
            updateCardStatus('heart-rate', config.heartRate, 60, 100);
            updateCardStatus('systolic', config.systolicBP, 90, 140);
            updateCardStatus('diastolic', config.diastolicBP, 60, 90);
            updateCardStatus('spo2', config.spo2, 95, 100);
            updateCardStatus('respiratory', config.respiratoryRate, 12, 20);
            
            // 保存当前值作为历史值
            config.previousValues = {
                heartRate: config.heartRate,
                systolicBP: config.systolicBP,
                diastolicBP: config.diastolicBP,
                spo2: config.spo2,
                respiratoryRate: config.respiratoryRate
            };
        }

        // 更新趋势指示器
        function updateTrendIndicator(element, current, previous) {
            const diff = current - previous;
            if (diff > 1) {
                element.textContent = '↑ 上升';
                element.className = 'vital-trend trend-up';
            } else if (diff < -1) {
                element.textContent = '↓ 下降';
                element.className = 'vital-trend trend-down';
            } else {
                element.textContent = '→ 稳定';
                element.className = 'vital-trend trend-stable';
            }
        }

        // 更新卡片状态
        function updateCardStatus(cardClass, value, low, high) {
            const card = document.querySelector(`.${cardClass}`);
            card.classList.remove('warning', 'critical');
            
            if (value < low * 0.8 || value > high * 1.2) {
                card.classList.add('critical');
            } else if (value < low || value > high) {
                card.classList.add('warning');
            }
        }

        // 更新监控时间
        function updateMonitoringTime() {
            const elapsed = Date.now() - config.monitoringStartTime;
            const hours = Math.floor(elapsed / 3600000);
            const minutes = Math.floor((elapsed % 3600000) / 60000);
            const seconds = Math.floor((elapsed % 60000) / 1000);
            
            monitoringTime.textContent = 
                `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }

        // 应用模拟场景
        function applyScenario(scenario) {
            selectedScenario = scenario;
            
            switch(scenario) {
                case 'normal':
                    config.heartRate = 72;
                    config.systolicBP = 120;
                    config.diastolicBP = 80;
                    config.spo2 = 98;
                    config.respiratoryRate = 16;
                    break;
                    
                case 'tachycardia':
                    config.heartRate = 130;
                    config.systolicBP = 140;
                    config.diastolicBP = 90;
                    config.spo2 = 96;
                    config.respiratoryRate = 22;
                    break;
                    
                case 'bradycardia':
                    config.heartRate = 45;
                    config.systolicBP = 100;
                    config.diastolicBP = 65;
                    config.spo2 = 95;
                    config.respiratoryRate = 10;
                    break;
                    
                case 'hypertension':
                    config.heartRate = 85;
                    config.systolicBP = 180;
                    config.diastolicBP = 110;
                    config.spo2 = 97;
                    config.respiratoryRate = 18;
                    break;
                    
                case 'hypotension':
                    config.heartRate = 55;
                    config.systolicBP = 85;
                    config.diastolicBP = 55;
                    config.spo2 = 92;
                    config.respiratoryRate = 14;
                    break;
                    
                case 'hypoxia':
                    config.heartRate = 95;
                    config.systolicBP = 130;
                    config.diastolicBP = 85;
                    config.spo2 = 82;
                    config.respiratoryRate = 26;
                    break;
            }
            
            // 更新滑块值
            heartRateSlider.value = config.heartRate;
            systolicSlider.value = config.systolicBP;
            diastolicSlider.value = config.diastolicBP;
            spo2Slider.value = config.spo2;
            respiratorySlider.value = config.respiratoryRate;
            
            // 更新滑块显示值
            document.getElementById('heartRateSliderValue').textContent = config.heartRate;
            document.getElementById('systolicSliderValue').textContent = config.systolicBP;
            document.getElementById('diastolicSliderValue').textContent = config.diastolicBP;
            document.getElementById('spo2SliderValue').textContent = config.spo2;
            document.getElementById('respiratorySliderValue').textContent = config.respiratoryRate;
            
            // 关闭模态框
            document.getElementById('scenarioModal').style.display = 'none';
        }

        // 主绘制循环
        function draw() {
            if (config.isPaused) return;
            
            drawECG();
            drawBP();
            drawSpO2();
            drawRespiratory();
            checkAlarms();
            updateVitalsDisplay();
            updateMonitoringTime();
            
            animationId = requestAnimationFrame(draw);
        }

        // 初始化事件监听
        function initEventListeners() {
            // 滑块事件
            heartRateSlider.addEventListener('input', (e) => {
                config.heartRate = parseInt(e.target.value);
                document.getElementById('heartRateSliderValue').textContent = config.heartRate;
            });
            
            systolicSlider.addEventListener('input', (e) => {
                config.systolicBP = parseInt(e.target.value);
                document.getElementById('systolicSliderValue').textContent = config.systolicBP;
            });
            
            diastolicSlider.addEventListener('input', (e) => {
                config.diastolicBP = parseInt(e.target.value);
                document.getElementById('diastolicSliderValue').textContent = config.diastolicBP;
            });
            
            spo2Slider.addEventListener('input', (e) => {
                config.spo2 = parseInt(e.target.value);
                document.getElementById('spo2SliderValue').textContent = config.spo2;
            });
            
            respiratorySlider.addEventListener('input', (e) => {
                config.respiratoryRate = parseInt(e.target.value);
                document.getElementById('respiratorySliderValue').textContent = config.respiratoryRate;
            });
            
            // 报警设置事件
            document.getElementById('hrHighAlarm').addEventListener('change', (e) => {
                config.alarmThresholds.hrHigh = parseInt(e.target.value);
            });
            
            document.getElementById('hrLowAlarm').addEventListener('change', (e) => {
                config.alarmThresholds.hrLow = parseInt(e.target.value);
            });
            
            document.getElementById('bpHighAlarm').addEventListener('change', (e) => {
                config.alarmThresholds.bpHigh = parseInt(e.target.value);
            });
            
            document.getElementById('bpLowAlarm').addEventListener('change', (e) => {
                config.alarmThresholds.bpLow = parseInt(e.target.value);
            });
            
            document.getElementById('spo2LowAlarm').addEventListener('change', (e) => {
                config.alarmThresholds.spo2Low = parseInt(e.target.value);
            });
            
            document.getElementById('respHighAlarm').addEventListener('change', (e) => {
                config.alarmThresholds.respHigh = parseInt(e.target.value);
            });
            
            // 按钮事件
            document.getElementById('pauseBtn').addEventListener('click', () => {
                config.isPaused = !config.isPaused;
                document.getElementById('pauseBtn').innerHTML = config.isPaused ? 
                    '<span>▶️</span><span>继续</span>' : '<span>⏸️</span><span>暂停</span>';
                if (!config.isPaused) draw();
            });
            
            document.getElementById('resetBtn').addEventListener('click', init);
            
            document.getElementById('muteBtn').addEventListener('click', () => {
                config.alarmsMuted = !config.alarmsMuted;
                document.getElementById('muteBtn').innerHTML = config.alarmsMuted ? 
                    '<span>🔊</span><span>取消静音</span>' : '<span>🔇</span><span>静音报警</span>';
            });
            
            // 模拟场景按钮事件
            document.getElementById('scenarioBtn').addEventListener('click', () => {
                document.getElementById('scenarioModal').style.display = 'flex';
            });
            
            document.getElementById('cancelScenario').addEventListener('click', () => {
                document.getElementById('scenarioModal').style.display = 'none';
            });
            
            document.getElementById('applyScenario').addEventListener('click', () => {
                applyScenario(selectedScenario);
            });
            
            // 场景选项事件
            document.querySelectorAll('.scenario-option').forEach(option => {
                option.addEventListener('click', () => {
                    document.querySelectorAll('.scenario-option').forEach(opt => {
                        opt.classList.remove('active');
                    });
                    option.classList.add('active');
                    selectedScenario = option.getAttribute('data-scenario');
                });
            });
            
            // 窗口调整大小事件
            window.addEventListener('resize', init);
        }

        // 初始化应用
        function initApp() {
            initEventListeners();
            init();
        }

        // 启动应用
        initApp();
    </script>
</body>
</html>